Terminals unused in grammar

   NL_TOKEN
   WS_TOKEN


Grammar

    0 $accept: program $end

    1 program: %empty
    2        | program function_def
    3        | program decl
    4        | program function_decl

    5 function_decl: kind ID LPAR kind RPAR SEMICOLON
    6              | error SEMICOLON

    7 $@1: %empty

    8 function_def: kind ID LPAR kind ID RPAR $@1 body

    9 $@2: %empty

   10 function_def: kind ID LPAR error RPAR $@2 body

   11 body: LBRACE decls stmts RBRACE

   12 decls: %empty
   13      | decls decl

   14 stmts: %empty
   15      | stmts stmt

   16 decl: kind var_list SEMICOLON
   17     | kind error SEMICOLON

   18 kind: KW_INT
   19     | KW_FLOAT

   20 stmt: LBRACE stmts RBRACE
   21     | expr SEMICOLON
   22     | error SEMICOLON

   23 $@3: %empty

   24 stmt: KW_WHILE $@3 LPAR bool_expr RPAR stmt

   25 $@4: %empty

   26 stmt: KW_READ $@4 var_list SEMICOLON
   27     | KW_READ error SEMICOLON
   28     | KW_WRITE write_expr_list SEMICOLON
   29     | KW_WRITE error SEMICOLON
   30     | KW_RETURN expr SEMICOLON
   31     | KW_IF LPAR bool_expr RPAR stmt
   32     | KW_IF LPAR bool_expr RPAR stmt KW_ELSE stmt

   33 write_expr_list: wlist_unit wlist_rep

   34 wlist_unit: expr
   35           | STRING_LIT

   36 wlist_rep: %empty
   37          | wlist_rep COMMA wlist_unit

   38 $@5: %empty

   39 var_list: ID $@5 var_list_rep

   40 var_list_rep: %empty
   41             | var_list_rep COMMA ID

   42 bool_expr: expr OP_EQ expr
   43          | expr OP_LT expr
   44          | expr OP_LE expr
   45          | expr OP_GT expr
   46          | expr OP_GE expr
   47          | expr error expr

   48 $@6: %empty

   49 expr: ID $@6 OP_ASSIGN expr
   50     | expr1

   51 expr1: expr1 OP_PLUS expr1
   52      | expr1 OP_MINUS expr1
   53      | expr1 OP_MULT expr1
   54      | expr1 OP_DIV expr1
   55      | OP_MINUS factor
   56      | factor

   57 factor: INT_LIT
   58       | FLOAT_LIT
   59       | function_call
   60       | LPAR expr RPAR
   61       | ID

   62 function_call: ID LPAR expr RPAR


Terminals, with rules where they appear

$end (0) 0
error (256) 6 10 17 22 27 29 47
ID (258) 5 8 10 39 41 49 61 62
KW_INT (259) 18
KW_FLOAT (260) 19
INT_LIT (261) 57
FLOAT_LIT (262) 58
STRING_LIT (263) 35
KW_IF (264) 31 32
KW_ELSE (265) 32
KW_WHILE (266) 24
KW_RETURN (267) 30
KW_READ (268) 26 27
KW_WRITE (269) 28 29
LPAR (270) 5 8 10 24 31 32 60 62
RPAR (271) 5 8 10 24 31 32 60 62
LBRACE (272) 11 20
RBRACE (273) 11 20
SEMICOLON (274) 5 6 16 17 21 22 26 27 28 29 30
COMMA (275) 37 41
NL_TOKEN (276)
WS_TOKEN (277)
OP_ASSIGN (278) 49
OP_EQ (279) 42
OP_LT (280) 43
OP_LE (281) 44
OP_GT (282) 45
OP_GE (283) 46
OP_PLUS (284) 51
OP_MINUS (285) 52 55
OP_MULT (286) 53
OP_DIV (287) 54
UMINUS (288)


Nonterminals, with rules where they appear

$accept (34)
    on left: 0
program (35)
    on left: 1 2 3 4, on right: 0 2 3 4
function_decl (36)
    on left: 5 6, on right: 4
function_def (37)
    on left: 8 10, on right: 2
$@1 (38)
    on left: 7, on right: 8
$@2 (39)
    on left: 9, on right: 10
body (40)
    on left: 11, on right: 8 10
decls (41)
    on left: 12 13, on right: 11 13
stmts (42)
    on left: 14 15, on right: 11 15 20
decl (43)
    on left: 16 17, on right: 3 13
kind (44)
    on left: 18 19, on right: 5 8 10 16 17
stmt (45)
    on left: 20 21 22 24 26 27 28 29 30 31 32, on right: 15 24 31 32
$@3 (46)
    on left: 23, on right: 24
$@4 (47)
    on left: 25, on right: 26
write_expr_list (48)
    on left: 33, on right: 28
wlist_unit (49)
    on left: 34 35, on right: 33 37
wlist_rep (50)
    on left: 36 37, on right: 33 37
var_list (51)
    on left: 39, on right: 16 26
$@5 (52)
    on left: 38, on right: 39
var_list_rep (53)
    on left: 40 41, on right: 39 41
bool_expr (54)
    on left: 42 43 44 45 46 47, on right: 24 31 32
expr (55)
    on left: 49 50, on right: 21 30 34 42 43 44 45 46 47 49 60 62
$@6 (56)
    on left: 48, on right: 49
expr1 (57)
    on left: 51 52 53 54 55 56, on right: 50 51 52 53 54
factor (58)
    on left: 57 58 59 60 61, on right: 55 56
function_call (59)
    on left: 62, on right: 59


State 0

    0 $accept: . program $end

    $default  reduce using rule 1 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    2 program: program . function_def
    3        | program . decl
    4        | program . function_decl

    $end      shift, and go to state 2
    error     shift, and go to state 3
    KW_INT    shift, and go to state 4
    KW_FLOAT  shift, and go to state 5

    function_decl  go to state 6
    function_def   go to state 7
    decl           go to state 8
    kind           go to state 9


State 2

    0 $accept: program $end .

    $default  accept


State 3

    6 function_decl: error . SEMICOLON

    SEMICOLON  shift, and go to state 10


State 4

   18 kind: KW_INT .

    $default  reduce using rule 18 (kind)


State 5

   19 kind: KW_FLOAT .

    $default  reduce using rule 19 (kind)


State 6

    4 program: program function_decl .

    $default  reduce using rule 4 (program)


State 7

    2 program: program function_def .

    $default  reduce using rule 2 (program)


State 8

    3 program: program decl .

    $default  reduce using rule 3 (program)


State 9

    5 function_decl: kind . ID LPAR kind RPAR SEMICOLON
    8 function_def: kind . ID LPAR kind ID RPAR $@1 body
   10             | kind . ID LPAR error RPAR $@2 body
   16 decl: kind . var_list SEMICOLON
   17     | kind . error SEMICOLON

    error  shift, and go to state 11
    ID     shift, and go to state 12

    var_list  go to state 13


State 10

    6 function_decl: error SEMICOLON .

    $default  reduce using rule 6 (function_decl)


State 11

   17 decl: kind error . SEMICOLON

    SEMICOLON  shift, and go to state 14


State 12

    5 function_decl: kind ID . LPAR kind RPAR SEMICOLON
    8 function_def: kind ID . LPAR kind ID RPAR $@1 body
   10             | kind ID . LPAR error RPAR $@2 body
   39 var_list: ID . $@5 var_list_rep

    LPAR  shift, and go to state 15

    $default  reduce using rule 38 ($@5)

    $@5  go to state 16


State 13

   16 decl: kind var_list . SEMICOLON

    SEMICOLON  shift, and go to state 17


State 14

   17 decl: kind error SEMICOLON .

    $default  reduce using rule 17 (decl)


State 15

    5 function_decl: kind ID LPAR . kind RPAR SEMICOLON
    8 function_def: kind ID LPAR . kind ID RPAR $@1 body
   10             | kind ID LPAR . error RPAR $@2 body

    error     shift, and go to state 18
    KW_INT    shift, and go to state 4
    KW_FLOAT  shift, and go to state 5

    kind  go to state 19


State 16

   39 var_list: ID $@5 . var_list_rep

    $default  reduce using rule 40 (var_list_rep)

    var_list_rep  go to state 20


State 17

   16 decl: kind var_list SEMICOLON .

    $default  reduce using rule 16 (decl)


State 18

   10 function_def: kind ID LPAR error . RPAR $@2 body

    RPAR  shift, and go to state 21


State 19

    5 function_decl: kind ID LPAR kind . RPAR SEMICOLON
    8 function_def: kind ID LPAR kind . ID RPAR $@1 body

    ID    shift, and go to state 22
    RPAR  shift, and go to state 23


State 20

   39 var_list: ID $@5 var_list_rep .
   41 var_list_rep: var_list_rep . COMMA ID

    COMMA  shift, and go to state 24

    $default  reduce using rule 39 (var_list)


State 21

   10 function_def: kind ID LPAR error RPAR . $@2 body

    $default  reduce using rule 9 ($@2)

    $@2  go to state 25


State 22

    8 function_def: kind ID LPAR kind ID . RPAR $@1 body

    RPAR  shift, and go to state 26


State 23

    5 function_decl: kind ID LPAR kind RPAR . SEMICOLON

    SEMICOLON  shift, and go to state 27


State 24

   41 var_list_rep: var_list_rep COMMA . ID

    ID  shift, and go to state 28


State 25

   10 function_def: kind ID LPAR error RPAR $@2 . body

    LBRACE  shift, and go to state 29

    body  go to state 30


State 26

    8 function_def: kind ID LPAR kind ID RPAR . $@1 body

    $default  reduce using rule 7 ($@1)

    $@1  go to state 31


State 27

    5 function_decl: kind ID LPAR kind RPAR SEMICOLON .

    $default  reduce using rule 5 (function_decl)


State 28

   41 var_list_rep: var_list_rep COMMA ID .

    $default  reduce using rule 41 (var_list_rep)


State 29

   11 body: LBRACE . decls stmts RBRACE

    $default  reduce using rule 12 (decls)

    decls  go to state 32


State 30

   10 function_def: kind ID LPAR error RPAR $@2 body .

    $default  reduce using rule 10 (function_def)


State 31

    8 function_def: kind ID LPAR kind ID RPAR $@1 . body

    LBRACE  shift, and go to state 29

    body  go to state 33


State 32

   11 body: LBRACE decls . stmts RBRACE
   13 decls: decls . decl

    KW_INT    shift, and go to state 4
    KW_FLOAT  shift, and go to state 5

    $default  reduce using rule 14 (stmts)

    stmts  go to state 34
    decl   go to state 35
    kind   go to state 36


State 33

    8 function_def: kind ID LPAR kind ID RPAR $@1 body .

    $default  reduce using rule 8 (function_def)


State 34

   11 body: LBRACE decls stmts . RBRACE
   15 stmts: stmts . stmt

    error      shift, and go to state 37
    ID         shift, and go to state 38
    INT_LIT    shift, and go to state 39
    FLOAT_LIT  shift, and go to state 40
    KW_IF      shift, and go to state 41
    KW_WHILE   shift, and go to state 42
    KW_RETURN  shift, and go to state 43
    KW_READ    shift, and go to state 44
    KW_WRITE   shift, and go to state 45
    LPAR       shift, and go to state 46
    LBRACE     shift, and go to state 47
    RBRACE     shift, and go to state 48
    OP_MINUS   shift, and go to state 49

    stmt           go to state 50
    expr           go to state 51
    expr1          go to state 52
    factor         go to state 53
    function_call  go to state 54


State 35

   13 decls: decls decl .

    $default  reduce using rule 13 (decls)


State 36

   16 decl: kind . var_list SEMICOLON
   17     | kind . error SEMICOLON

    error  shift, and go to state 11
    ID     shift, and go to state 55

    var_list  go to state 13


State 37

   22 stmt: error . SEMICOLON

    SEMICOLON  shift, and go to state 56


State 38

   49 expr: ID . $@6 OP_ASSIGN expr
   61 factor: ID .
   62 function_call: ID . LPAR expr RPAR

    LPAR  shift, and go to state 57

    OP_ASSIGN  reduce using rule 48 ($@6)
    $default   reduce using rule 61 (factor)

    $@6  go to state 58


State 39

   57 factor: INT_LIT .

    $default  reduce using rule 57 (factor)


State 40

   58 factor: FLOAT_LIT .

    $default  reduce using rule 58 (factor)


State 41

   31 stmt: KW_IF . LPAR bool_expr RPAR stmt
   32     | KW_IF . LPAR bool_expr RPAR stmt KW_ELSE stmt

    LPAR  shift, and go to state 59


State 42

   24 stmt: KW_WHILE . $@3 LPAR bool_expr RPAR stmt

    $default  reduce using rule 23 ($@3)

    $@3  go to state 60


State 43

   30 stmt: KW_RETURN . expr SEMICOLON

    ID         shift, and go to state 38
    INT_LIT    shift, and go to state 39
    FLOAT_LIT  shift, and go to state 40
    LPAR       shift, and go to state 46
    OP_MINUS   shift, and go to state 49

    expr           go to state 61
    expr1          go to state 52
    factor         go to state 53
    function_call  go to state 54


State 44

   26 stmt: KW_READ . $@4 var_list SEMICOLON
   27     | KW_READ . error SEMICOLON

    error  shift, and go to state 62

    ID  reduce using rule 25 ($@4)

    $@4  go to state 63


State 45

   28 stmt: KW_WRITE . write_expr_list SEMICOLON
   29     | KW_WRITE . error SEMICOLON

    error       shift, and go to state 64
    ID          shift, and go to state 38
    INT_LIT     shift, and go to state 39
    FLOAT_LIT   shift, and go to state 40
    STRING_LIT  shift, and go to state 65
    LPAR        shift, and go to state 46
    OP_MINUS    shift, and go to state 49

    write_expr_list  go to state 66
    wlist_unit       go to state 67
    expr             go to state 68
    expr1            go to state 52
    factor           go to state 53
    function_call    go to state 54


State 46

   60 factor: LPAR . expr RPAR

    ID         shift, and go to state 38
    INT_LIT    shift, and go to state 39
    FLOAT_LIT  shift, and go to state 40
    LPAR       shift, and go to state 46
    OP_MINUS   shift, and go to state 49

    expr           go to state 69
    expr1          go to state 52
    factor         go to state 53
    function_call  go to state 54


State 47

   20 stmt: LBRACE . stmts RBRACE

    $default  reduce using rule 14 (stmts)

    stmts  go to state 70


State 48

   11 body: LBRACE decls stmts RBRACE .

    $default  reduce using rule 11 (body)


State 49

   55 expr1: OP_MINUS . factor

    ID         shift, and go to state 71
    INT_LIT    shift, and go to state 39
    FLOAT_LIT  shift, and go to state 40
    LPAR       shift, and go to state 46

    factor         go to state 72
    function_call  go to state 54


State 50

   15 stmts: stmts stmt .

    $default  reduce using rule 15 (stmts)


State 51

   21 stmt: expr . SEMICOLON

    SEMICOLON  shift, and go to state 73


State 52

   50 expr: expr1 .
   51 expr1: expr1 . OP_PLUS expr1
   52      | expr1 . OP_MINUS expr1
   53      | expr1 . OP_MULT expr1
   54      | expr1 . OP_DIV expr1

    OP_PLUS   shift, and go to state 74
    OP_MINUS  shift, and go to state 75
    OP_MULT   shift, and go to state 76
    OP_DIV    shift, and go to state 77

    $default  reduce using rule 50 (expr)


State 53

   56 expr1: factor .

    $default  reduce using rule 56 (expr1)


State 54

   59 factor: function_call .

    $default  reduce using rule 59 (factor)


State 55

   39 var_list: ID . $@5 var_list_rep

    $default  reduce using rule 38 ($@5)

    $@5  go to state 16


State 56

   22 stmt: error SEMICOLON .

    $default  reduce using rule 22 (stmt)


State 57

   62 function_call: ID LPAR . expr RPAR

    ID         shift, and go to state 38
    INT_LIT    shift, and go to state 39
    FLOAT_LIT  shift, and go to state 40
    LPAR       shift, and go to state 46
    OP_MINUS   shift, and go to state 49

    expr           go to state 78
    expr1          go to state 52
    factor         go to state 53
    function_call  go to state 54


State 58

   49 expr: ID $@6 . OP_ASSIGN expr

    OP_ASSIGN  shift, and go to state 79


State 59

   31 stmt: KW_IF LPAR . bool_expr RPAR stmt
   32     | KW_IF LPAR . bool_expr RPAR stmt KW_ELSE stmt

    ID         shift, and go to state 38
    INT_LIT    shift, and go to state 39
    FLOAT_LIT  shift, and go to state 40
    LPAR       shift, and go to state 46
    OP_MINUS   shift, and go to state 49

    bool_expr      go to state 80
    expr           go to state 81
    expr1          go to state 52
    factor         go to state 53
    function_call  go to state 54


State 60

   24 stmt: KW_WHILE $@3 . LPAR bool_expr RPAR stmt

    LPAR  shift, and go to state 82


State 61

   30 stmt: KW_RETURN expr . SEMICOLON

    SEMICOLON  shift, and go to state 83


State 62

   27 stmt: KW_READ error . SEMICOLON

    SEMICOLON  shift, and go to state 84


State 63

   26 stmt: KW_READ $@4 . var_list SEMICOLON

    ID  shift, and go to state 55

    var_list  go to state 85


State 64

   29 stmt: KW_WRITE error . SEMICOLON

    SEMICOLON  shift, and go to state 86


State 65

   35 wlist_unit: STRING_LIT .

    $default  reduce using rule 35 (wlist_unit)


State 66

   28 stmt: KW_WRITE write_expr_list . SEMICOLON

    SEMICOLON  shift, and go to state 87


State 67

   33 write_expr_list: wlist_unit . wlist_rep

    $default  reduce using rule 36 (wlist_rep)

    wlist_rep  go to state 88


State 68

   34 wlist_unit: expr .

    $default  reduce using rule 34 (wlist_unit)


State 69

   60 factor: LPAR expr . RPAR

    RPAR  shift, and go to state 89


State 70

   15 stmts: stmts . stmt
   20 stmt: LBRACE stmts . RBRACE

    error      shift, and go to state 37
    ID         shift, and go to state 38
    INT_LIT    shift, and go to state 39
    FLOAT_LIT  shift, and go to state 40
    KW_IF      shift, and go to state 41
    KW_WHILE   shift, and go to state 42
    KW_RETURN  shift, and go to state 43
    KW_READ    shift, and go to state 44
    KW_WRITE   shift, and go to state 45
    LPAR       shift, and go to state 46
    LBRACE     shift, and go to state 47
    RBRACE     shift, and go to state 90
    OP_MINUS   shift, and go to state 49

    stmt           go to state 50
    expr           go to state 51
    expr1          go to state 52
    factor         go to state 53
    function_call  go to state 54


State 71

   61 factor: ID .
   62 function_call: ID . LPAR expr RPAR

    LPAR  shift, and go to state 57

    $default  reduce using rule 61 (factor)


State 72

   55 expr1: OP_MINUS factor .

    $default  reduce using rule 55 (expr1)


State 73

   21 stmt: expr SEMICOLON .

    $default  reduce using rule 21 (stmt)


State 74

   51 expr1: expr1 OP_PLUS . expr1

    ID         shift, and go to state 71
    INT_LIT    shift, and go to state 39
    FLOAT_LIT  shift, and go to state 40
    LPAR       shift, and go to state 46
    OP_MINUS   shift, and go to state 49

    expr1          go to state 91
    factor         go to state 53
    function_call  go to state 54


State 75

   52 expr1: expr1 OP_MINUS . expr1

    ID         shift, and go to state 71
    INT_LIT    shift, and go to state 39
    FLOAT_LIT  shift, and go to state 40
    LPAR       shift, and go to state 46
    OP_MINUS   shift, and go to state 49

    expr1          go to state 92
    factor         go to state 53
    function_call  go to state 54


State 76

   53 expr1: expr1 OP_MULT . expr1

    ID         shift, and go to state 71
    INT_LIT    shift, and go to state 39
    FLOAT_LIT  shift, and go to state 40
    LPAR       shift, and go to state 46
    OP_MINUS   shift, and go to state 49

    expr1          go to state 93
    factor         go to state 53
    function_call  go to state 54


State 77

   54 expr1: expr1 OP_DIV . expr1

    ID         shift, and go to state 71
    INT_LIT    shift, and go to state 39
    FLOAT_LIT  shift, and go to state 40
    LPAR       shift, and go to state 46
    OP_MINUS   shift, and go to state 49

    expr1          go to state 94
    factor         go to state 53
    function_call  go to state 54


State 78

   62 function_call: ID LPAR expr . RPAR

    RPAR  shift, and go to state 95


State 79

   49 expr: ID $@6 OP_ASSIGN . expr

    ID         shift, and go to state 38
    INT_LIT    shift, and go to state 39
    FLOAT_LIT  shift, and go to state 40
    LPAR       shift, and go to state 46
    OP_MINUS   shift, and go to state 49

    expr           go to state 96
    expr1          go to state 52
    factor         go to state 53
    function_call  go to state 54


State 80

   31 stmt: KW_IF LPAR bool_expr . RPAR stmt
   32     | KW_IF LPAR bool_expr . RPAR stmt KW_ELSE stmt

    RPAR  shift, and go to state 97


State 81

   42 bool_expr: expr . OP_EQ expr
   43          | expr . OP_LT expr
   44          | expr . OP_LE expr
   45          | expr . OP_GT expr
   46          | expr . OP_GE expr
   47          | expr . error expr

    error  shift, and go to state 98
    OP_EQ  shift, and go to state 99
    OP_LT  shift, and go to state 100
    OP_LE  shift, and go to state 101
    OP_GT  shift, and go to state 102
    OP_GE  shift, and go to state 103


State 82

   24 stmt: KW_WHILE $@3 LPAR . bool_expr RPAR stmt

    ID         shift, and go to state 38
    INT_LIT    shift, and go to state 39
    FLOAT_LIT  shift, and go to state 40
    LPAR       shift, and go to state 46
    OP_MINUS   shift, and go to state 49

    bool_expr      go to state 104
    expr           go to state 81
    expr1          go to state 52
    factor         go to state 53
    function_call  go to state 54


State 83

   30 stmt: KW_RETURN expr SEMICOLON .

    $default  reduce using rule 30 (stmt)


State 84

   27 stmt: KW_READ error SEMICOLON .

    $default  reduce using rule 27 (stmt)


State 85

   26 stmt: KW_READ $@4 var_list . SEMICOLON

    SEMICOLON  shift, and go to state 105


State 86

   29 stmt: KW_WRITE error SEMICOLON .

    $default  reduce using rule 29 (stmt)


State 87

   28 stmt: KW_WRITE write_expr_list SEMICOLON .

    $default  reduce using rule 28 (stmt)


State 88

   33 write_expr_list: wlist_unit wlist_rep .
   37 wlist_rep: wlist_rep . COMMA wlist_unit

    COMMA  shift, and go to state 106

    $default  reduce using rule 33 (write_expr_list)


State 89

   60 factor: LPAR expr RPAR .

    $default  reduce using rule 60 (factor)


State 90

   20 stmt: LBRACE stmts RBRACE .

    $default  reduce using rule 20 (stmt)


State 91

   51 expr1: expr1 . OP_PLUS expr1
   51      | expr1 OP_PLUS expr1 .
   52      | expr1 . OP_MINUS expr1
   53      | expr1 . OP_MULT expr1
   54      | expr1 . OP_DIV expr1

    OP_MULT  shift, and go to state 76
    OP_DIV   shift, and go to state 77

    $default  reduce using rule 51 (expr1)


State 92

   51 expr1: expr1 . OP_PLUS expr1
   52      | expr1 . OP_MINUS expr1
   52      | expr1 OP_MINUS expr1 .
   53      | expr1 . OP_MULT expr1
   54      | expr1 . OP_DIV expr1

    OP_MULT  shift, and go to state 76
    OP_DIV   shift, and go to state 77

    $default  reduce using rule 52 (expr1)


State 93

   51 expr1: expr1 . OP_PLUS expr1
   52      | expr1 . OP_MINUS expr1
   53      | expr1 . OP_MULT expr1
   53      | expr1 OP_MULT expr1 .
   54      | expr1 . OP_DIV expr1

    $default  reduce using rule 53 (expr1)


State 94

   51 expr1: expr1 . OP_PLUS expr1
   52      | expr1 . OP_MINUS expr1
   53      | expr1 . OP_MULT expr1
   54      | expr1 . OP_DIV expr1
   54      | expr1 OP_DIV expr1 .

    $default  reduce using rule 54 (expr1)


State 95

   62 function_call: ID LPAR expr RPAR .

    $default  reduce using rule 62 (function_call)


State 96

   49 expr: ID $@6 OP_ASSIGN expr .

    $default  reduce using rule 49 (expr)


State 97

   31 stmt: KW_IF LPAR bool_expr RPAR . stmt
   32     | KW_IF LPAR bool_expr RPAR . stmt KW_ELSE stmt

    error      shift, and go to state 37
    ID         shift, and go to state 38
    INT_LIT    shift, and go to state 39
    FLOAT_LIT  shift, and go to state 40
    KW_IF      shift, and go to state 41
    KW_WHILE   shift, and go to state 42
    KW_RETURN  shift, and go to state 43
    KW_READ    shift, and go to state 44
    KW_WRITE   shift, and go to state 45
    LPAR       shift, and go to state 46
    LBRACE     shift, and go to state 47
    OP_MINUS   shift, and go to state 49

    stmt           go to state 107
    expr           go to state 51
    expr1          go to state 52
    factor         go to state 53
    function_call  go to state 54


State 98

   47 bool_expr: expr error . expr

    ID         shift, and go to state 38
    INT_LIT    shift, and go to state 39
    FLOAT_LIT  shift, and go to state 40
    LPAR       shift, and go to state 46
    OP_MINUS   shift, and go to state 49

    expr           go to state 108
    expr1          go to state 52
    factor         go to state 53
    function_call  go to state 54


State 99

   42 bool_expr: expr OP_EQ . expr

    ID         shift, and go to state 38
    INT_LIT    shift, and go to state 39
    FLOAT_LIT  shift, and go to state 40
    LPAR       shift, and go to state 46
    OP_MINUS   shift, and go to state 49

    expr           go to state 109
    expr1          go to state 52
    factor         go to state 53
    function_call  go to state 54


State 100

   43 bool_expr: expr OP_LT . expr

    ID         shift, and go to state 38
    INT_LIT    shift, and go to state 39
    FLOAT_LIT  shift, and go to state 40
    LPAR       shift, and go to state 46
    OP_MINUS   shift, and go to state 49

    expr           go to state 110
    expr1          go to state 52
    factor         go to state 53
    function_call  go to state 54


State 101

   44 bool_expr: expr OP_LE . expr

    ID         shift, and go to state 38
    INT_LIT    shift, and go to state 39
    FLOAT_LIT  shift, and go to state 40
    LPAR       shift, and go to state 46
    OP_MINUS   shift, and go to state 49

    expr           go to state 111
    expr1          go to state 52
    factor         go to state 53
    function_call  go to state 54


State 102

   45 bool_expr: expr OP_GT . expr

    ID         shift, and go to state 38
    INT_LIT    shift, and go to state 39
    FLOAT_LIT  shift, and go to state 40
    LPAR       shift, and go to state 46
    OP_MINUS   shift, and go to state 49

    expr           go to state 112
    expr1          go to state 52
    factor         go to state 53
    function_call  go to state 54


State 103

   46 bool_expr: expr OP_GE . expr

    ID         shift, and go to state 38
    INT_LIT    shift, and go to state 39
    FLOAT_LIT  shift, and go to state 40
    LPAR       shift, and go to state 46
    OP_MINUS   shift, and go to state 49

    expr           go to state 113
    expr1          go to state 52
    factor         go to state 53
    function_call  go to state 54


State 104

   24 stmt: KW_WHILE $@3 LPAR bool_expr . RPAR stmt

    RPAR  shift, and go to state 114


State 105

   26 stmt: KW_READ $@4 var_list SEMICOLON .

    $default  reduce using rule 26 (stmt)


State 106

   37 wlist_rep: wlist_rep COMMA . wlist_unit

    ID          shift, and go to state 38
    INT_LIT     shift, and go to state 39
    FLOAT_LIT   shift, and go to state 40
    STRING_LIT  shift, and go to state 65
    LPAR        shift, and go to state 46
    OP_MINUS    shift, and go to state 49

    wlist_unit     go to state 115
    expr           go to state 68
    expr1          go to state 52
    factor         go to state 53
    function_call  go to state 54


State 107

   31 stmt: KW_IF LPAR bool_expr RPAR stmt .
   32     | KW_IF LPAR bool_expr RPAR stmt . KW_ELSE stmt

    KW_ELSE  shift, and go to state 116

    $default  reduce using rule 31 (stmt)


State 108

   47 bool_expr: expr error expr .

    $default  reduce using rule 47 (bool_expr)


State 109

   42 bool_expr: expr OP_EQ expr .

    $default  reduce using rule 42 (bool_expr)


State 110

   43 bool_expr: expr OP_LT expr .

    $default  reduce using rule 43 (bool_expr)


State 111

   44 bool_expr: expr OP_LE expr .

    $default  reduce using rule 44 (bool_expr)


State 112

   45 bool_expr: expr OP_GT expr .

    $default  reduce using rule 45 (bool_expr)


State 113

   46 bool_expr: expr OP_GE expr .

    $default  reduce using rule 46 (bool_expr)


State 114

   24 stmt: KW_WHILE $@3 LPAR bool_expr RPAR . stmt

    error      shift, and go to state 37
    ID         shift, and go to state 38
    INT_LIT    shift, and go to state 39
    FLOAT_LIT  shift, and go to state 40
    KW_IF      shift, and go to state 41
    KW_WHILE   shift, and go to state 42
    KW_RETURN  shift, and go to state 43
    KW_READ    shift, and go to state 44
    KW_WRITE   shift, and go to state 45
    LPAR       shift, and go to state 46
    LBRACE     shift, and go to state 47
    OP_MINUS   shift, and go to state 49

    stmt           go to state 117
    expr           go to state 51
    expr1          go to state 52
    factor         go to state 53
    function_call  go to state 54


State 115

   37 wlist_rep: wlist_rep COMMA wlist_unit .

    $default  reduce using rule 37 (wlist_rep)


State 116

   32 stmt: KW_IF LPAR bool_expr RPAR stmt KW_ELSE . stmt

    error      shift, and go to state 37
    ID         shift, and go to state 38
    INT_LIT    shift, and go to state 39
    FLOAT_LIT  shift, and go to state 40
    KW_IF      shift, and go to state 41
    KW_WHILE   shift, and go to state 42
    KW_RETURN  shift, and go to state 43
    KW_READ    shift, and go to state 44
    KW_WRITE   shift, and go to state 45
    LPAR       shift, and go to state 46
    LBRACE     shift, and go to state 47
    OP_MINUS   shift, and go to state 49

    stmt           go to state 118
    expr           go to state 51
    expr1          go to state 52
    factor         go to state 53
    function_call  go to state 54


State 117

   24 stmt: KW_WHILE $@3 LPAR bool_expr RPAR stmt .

    $default  reduce using rule 24 (stmt)


State 118

   32 stmt: KW_IF LPAR bool_expr RPAR stmt KW_ELSE stmt .

    $default  reduce using rule 32 (stmt)
